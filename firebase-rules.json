{
  "rules": {
    "users": {
      "$user_id": {
        ".read": "$user_id === auth.uid",
        // grants write access to the owner of this user account
        // whose uid must exactly match the key ($user_id)
        ".write": "$user_id === auth.uid",
        ".validate": "newData.hasChildren(['provider', 'displayName'])",
        "displayName": {
          ".validate": "newData.val() === auth.email"
        },
        "provider": {
          ".validate": "newData.val() == 'password'"
        },
        "root_containers": {
          "$container": {
            ".validate": "newData.val() === true && root.child('containers/' + $container).exists()"
          }
        }
      }
    },
    "containers": {
      ".read": "auth !== null",
      // haven't locked down writes yet, but you do need to be authenticated
      ".write": "auth !== null",
      "$container_id": {
        // a valid container must have attributes "owner", "parent", and "name"
        ".validate": "newData.hasChildren(['owner', 'parent', 'name'])",
        "owner": {
          ".validate": "root.child('/users/' + newData.val()).exists()"
        },
        "name": {
          ".validate": "newData.isString()"
        },
        "parent": {
          ".validate": "newData.val() === false || root.child('containers/' + newData.val()).exists()"
        },
        // optional attributes below
        "children": {
          "$child_id": {
            ".validate": "root.child('containers/' + $child_id).exists()"
          }
        },
        "description": {
          ".validate": "newData.isString() || newData.val() === null"
        },
        "objects": {
          "$object_id": {
            ".validate": "root.child('objects/' + $object_id).exists() && newData.val() === true"
          }
        }
      }
    },
    "objects": {
      ".read": "auth !== null",
      // haven't locked down writes yet, but you do need to be authenticated
      ".write": "auth !== null",
      "$object_id": {
        // a valid container must have attributes "container" and "data"
        ".validate": "newData.hasChildren(['container', 'data'])",
        "container": {
          ".validate": "root.child('containers/' + newData.val()).exists()"
        },
        "data": {
          ".validate": "newData.exists()"
        }
      }
    }
  }
}
