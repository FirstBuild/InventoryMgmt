{
  "rules": {
    "users": {
      "$userId": {
        ".read": "$userId === auth.uid",
        // grants write access to the owner of this user account
        // whose uid must exactly match the key ($user_id)
        ".write": "$userId === auth.uid",
        ".validate": "newData.hasChildren(['provider', 'displayName', 'rootContainer'])",
        "displayName": {
          ".validate": "newData.isString()"
        },
        "email": {
          ".validate": "newData.val() === auth.email"
        },
        "provider": {
          ".validate": "newData.val() == 'password'"
        },
        "rootContainer": {
            ".validate": "root.child('containers/' + newData.val()).exists()"
        }
      }
    },
    "containers": {
      ".read": "auth !== null",
      // haven't locked down writes yet, but you do need to be authenticated
      ".write": "auth !== null",
      "$containerId": {
        // a valid container must have attributes "owners", "parent", and "name"
        ".validate": "newData.hasChildren(['owners', 'parent', 'name'])",
        "owners": {
          "$ownerId": {
            // allow creation of a root container without a valid owners entry
            // as each user requires a root container and it would create a
            // circular dependency if each required the other
            ".validate": "(newData.parent().parent().child('parent').val() === false) || (root.child('/users/' + $ownerId).exists() && newData.val() === true)"
          }
        },
        "name": {
          ".validate": "newData.isString()"
        },
        "parent": {
          ".validate": "newData.val() === false || root.child('containers/' + newData.val()).exists()"
        },
        // optional attributes below
        "children": {
          "$childId": {
            ".validate": "root.child('containers/' + $childId).exists()"
          }
        },
        "description": {
          ".validate": "newData.isString() || newData.val() === null"
        },
        "objects": {
          "$objectId": {
            ".validate": "root.child('objects/' + $objectId).exists() && newData.val() === true"
          }
        }
      }
    },
    "objects": {
      ".read": "auth !== null",
      // haven't locked down writes yet, but you do need to be authenticated
      ".write": "auth !== null",
      "$objectId": {
        // a valid container must have attributes "container" and "data"
        ".validate": "newData.hasChildren(['container', 'data'])",
        "container": {
          ".validate": "root.child('containers/' + newData.val()).exists()"
        },
        "data": {
          ".validate": "newData.exists()"
        }
      }
    }
  }
}
